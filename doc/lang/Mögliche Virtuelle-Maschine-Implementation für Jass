Virtuelle-Maschine-Implementation

Die folgenden API-Kategorien sind nach der Reihenfolge ihres Auftretens (falls vorhanden) in der Datei common.j sortiert.
Falls es eines Tages möglich sein sollte, eine eigene virtuelle Maschine für Jass bzw. Jass++ zu schreiben, so sollten folgende native Funktionen hinzugefügt werden:

Bitwise API:
* native BitAnd takes integer a, integer b returns integer
* native BitOr takes integer a, integer b returns integer
* native BitXor takes integer a, integer b returns integer
* native BitSHL takes integer value, integer shift returns integer
* native BitSHR takes integer value, integer shift returns integer
* native BitNot takes integer value returns integer

Math API:
* native RMin takes real a, real b returns real
* native RMax takes real a, real b returns real
* native RAbs takes real a returns real
* native RSign takes real a returns real
* native RMod takes real dividend, real divisor returns real
* native RExp takes real a returns real
* native RLog takes real a returns real
* native RLog10 takes real a returns real
* native IMin takes integer a, integer b returns integer
* native IMax takes integer a, integer b returns integer
* native IAbs takes integer a returns integer
* native ISign takes integer a returns integer
* native IMod takes integer dividend, integer divisor returns integer

String Utility API:
Orientiert an den C-String-Funktionen der C-Standardbibliothek (nicht die Namen betreffend).
* native StringIndex takes string source, string target returns integer
* native StringComparison takes string a, string b returns integer
Vergleicht die beiden Zeichenketten a und b miteinander und liefert ihre Beziehung als ganzzahligen
Wert. 0 bedeutet, dass beide Zeichenketten den gleichen Inhalt haben (siehe strcmp).
Es gilt zu beachten, dass Warcraft 3 TFT ausschließlich UTF-8-Zeichenketten verwendet.
* native StringToken takes string source, integer number, string delimiters returns string
Gibt das nte Token der Zeichenkette zurück (beginnend bei 0) als Trennzeichen werden alle einzelnen
Zeichen der Zeichenkette "delimiters" verwendet. Lieft der Wert von "number" außerhalb des Token-
Bereichs, liefert die Funktion null.

Group API:
* native GroupCount takes group whichGroup returns integer
* native GroupUnit takes group whichGroup, integer index returns unit

Force API:
* native ForceCount takes force whichForce returns integer
* native ForcePlayer takes force whichForce, integer index returns player

Native trigger interface
* native EvaluateFunc takes string funcName returns boolean

Handle API:
* native GetHandleSize takes handle whichHandle returns integer
Liefert die Anzahl in Bytes. Für die Umsetzung dieser Funktionen müssen die Typen dynamisch
gespeichert werden. Je nach Entwicklungsaufwand, könnte diese Funktion auch optional sein.
  
Agent API:
* native GetAgentReferences takes agent whichAgent returns integer
Liefert die Anzahl der Referenzen auf das Objekt. Für diese Funktion müsste eine Garbage Collection
mit Referenzzähler eingebaut werden. Je nach Entwicklungsaufwand, könnte diese Funktion auch optional sein.

Trigger API:
* native TriggerRemoveEvent takes trigger whichTrigger, event whichEvent returns nothing
* native TriggerClearEvents takes trigger whichTrigger returns nothing
* native TriggerCountEvents takes trigger whichTrigger returns integer
* native TriggerCountConditions takes trigger whichTrigger returns integer
* native TriggerCountActions takes trigger whichTrigger returns integer
* native TriggerSyncStop takes nothing returns nothing
  
Unit API:
* native UnitAddBuff takes unit whichUnit, integer buffId returns boolean
* native UnitRemoveBuff takes unit whichUnit, integer buffId returns boolean
* native UnitHasBuff takes unit whichUnit, integer buffId returns boolean
* native GetHeroStrBonus takes unit whichHero returns integer
* native GetHeroAgiBonus takes unit whichHero returns integer
* native GetHeroIntBonus takes unit whichHero returns integer
* native GetUnitZ takes unit whichUnit returns real
  
Player API:
* native TriggerRegisterPlayerKeyEvent takes trigger whichTrigger, player whichPlayer, key whichKey, boolean pressed returns event

Die folgenden Funktionen könnten auch mittels GetLocalPlayer implementiert werden:
* native HasPlayerKeyPressed takes player whichPlayer, key whichKey returns boolean
* native GetPlayerMouseX takes player whichPlayer returns real
* native GetPlayerMouseY takes player whichPlayer returns real
* native GetPlayerPing takes player whichPlayer returns real
* native SetPlayerMinimap takes player whichPlayer, string filePath returns nothing
* native EnablePlayerMinimap takes player whichPlayer, boolean enable returns nothing 
* native IsPlayerMinimapEnabled takes player whichPlayer returns boolean

Visual API:
* native SetMinimap takes string filePath returns nothing
* native EnableMinimap takes boolean enable returns nothing
* native IsMinimapEnabled takes nothing returns boolean

Trackable API:
* native RemoveTrackable takes trackable whichTrackable returns nothing
* native TrackableShow takes trackable whichTrackable, boolean show returns nothing
* native TrackableIsShown takes trackable whichTrackable returns boolean
* native TrackableSetModelPath takes trackable whichTrackable, string modelPath returns nothing
* native TrackableModelPath takes trackable whichTrackable returns string
* native TrackableSetX takes trackable whichTrackable, real x returns nothing
* native TrackableX takes trackable whichTrackable returns real
* native TrackableSetY takes trackable whichTrackable, real y returns nothing
* native TrackableY takes trackable whichTrackable returns real
* native TrackableSetFacing takes trackable whichTrackable, real facing returns nothing
* native TrackableFacing takes trackable whichTrackable returns real
  
Quest API:
* native QuestRemoveItem takes questitem whichQuestItem returns nothing

Leaderboard API:
* native LeaderboardSetItemIcon takes leaderboard lb, integer whichItem, string iconPath returns nothing
* native LeaderboardGetItemIcon takes leaderboard lb, integer whichItem returns string
* native LeaderboardGetItemValue takes leaderboard lb, integer whichItem returns integer
* native LeaderboardGetItemLabel takes leaderboard lb, integer whichItem returns string

Multiboard API:
* native MultiboardGetTitleTextColorRed takes multiboard lb returns integer
* native MultiboardGetTitleTextColorGreen takes multiboard lb returns integer
* native MultiboardGetTitleTextColorBlue takes multiboard lb returns integer
* native MultiboardGetTitleTextColorAlpha takes multiboard lb returns integer
* native MultiboardGetItemStyleShowValue takes multiboard lb returns boolean
* native MultiboardGetItemStyleShowIcon takes multiboard lb returns boolean
* native MultiboardGetItemValue takes multiboard lb returns string
* native MultiboardGetItemValueColorRed takes multiboard lb returns integer
* native MultiboardGetItemValueColorGreen takes multiboard lb returns integer
* native MultiboardGetItemValueColorBlue takes multiboard lb returns integer
* native MultiboardGetItemValueColorAlpha takes multiboard lb returns integer
* native MultiboardGetItemWidth takes multiboard lb returns real
* native MultiboardGetItemIcon takes multiboard lb returns string

Camera API:

Sound API:

globals
	integer UNIT_SOUND_WHAT_n = X
	integer UNIT_SOUND_YES_n = X
	integer UNIT_SOUND_YES_ATTACK_n = X
	integer UNIT_SOUND_PISSED_n = X
endglobals
* native CreateUnitSound takes unit whichUnit, integer t returns sound

Effects API:

Terrain API:
* native SetTerrainCliffLevel takes real x, real y, integer cliffLevel returns nothing
* native SetTerrainRectCliffLevel takes rect whichRect, integer cliffLevel returns nothing
* native SetTerrainRegionCliffLevel takes region whichRegion, integer cliffLevel returns nothing
* native SetTerrainRectType takes rect whichRect, integer terrainType, integer variation, integer area, integer shape returns nothing
* native SetTerrainRegionType takes region whichRegion, integer terrainType, integer variation, integer area, integer shape returns nothing
* native IsTerrainRectPathable takes rect whichRect, pathingtype t returns boolean
Gibt false zurück, falls mindestens ein Punkt nicht passierbar ist.
* native IsTerrainRegionPathable takes region whichRegion, pathingtype t returns boolean
* native SetTerrainRectPathable takes rect whichRect, pathingtype t, boolean flag returns nothing
* native SetTerrainRegionPathable takes region whichRegion, pathingtype t, boolean flag returns nothing

Image API:

Ubersplat API:

Blight API:

Doodad API:

Computer AI interface:

Erweiterte API (keine einfachen Zusätze mehr)

File API:
Local code, no net traffic. Use GetLocalPlayer() to create player-specific functions.
Creating files for non-host players has to be allowed by enabling an option (by the players themselves!).
* type file extends agent
Ist referenzbasiert, keine Kopierung.
* type filecompression extends handle
Kopierung.
* type filelocale extends handle
Kopierung.
* constant native ConvertFileCompression takes integer i returns filecompression
* constant native ConvertFileLocale takes integer i returns filelocale
* native CreateLocalFile takes string filePath returns file
Lokales Dateisystem.
Parameter filePath enthält einen relativen Pfad zu einem Standardverzeichnis, in welchem alle erzeugten Dateien abgelegt werden!
* native CreateLocalDirectory takes string directoryPath returns file
Lokales Dateisystem.
* native OpenFile takes string filePath, filelocale preferedFileLocale returns file
MPQ-Dateien.
* native OpenLocalFile takes string filePath returns file
Lokale Dateien in einem speziellen Verzeichnis?
* native CloseFile takes file whichFile returns boolean
* native IsFileDirectory takes file whichFile returns boolean
* native GetFileName takes file whichFile returns string
* native GetFilePath takes file whichFile returns string
* native GetFileDirectoryEntries file whichFile returns integer
Gibt 0 zurück, falls die Datei kein Verzeichnis ist.
* native GetFileDirectoryEntry file whichFile, integer index returns string
* native GetFileDirectoryPath takes file whichFile returns string
* native GetFileSize takes file whichFile returns integer
Größe in Bytes.
* native GetFileCompressedSize takes file whichFile returns integer
Komprimierte Größe in MPQs.
* native GetFileCompression takes file whichFile returns filecompression
* native GetFileLocale takes file whichFile returns filelocale
* native SeekFile takes file whichFile, integer position returns boolean
* native GetFileSeekPosition takes file whichFile returns integer
* native GetFileEndPosition takes file whichFile returns integer
* native ReadFileString takes file whichFile, integer length returns string
* native ReadFileInteger takes file whichFile returns integer
* native ReadFileReal takes file whichFile returns real
* native ReadFileBoolean takes file whichFile returns boolean
* native WriteFileString takes file whichFile, string line returns boolean
* native WriteFileInteger takes file whichFile, integer value returns boolean
* native WriteFileReal takes file whichFile, real value returns boolean
* native WriteFileBoolean takes file whichFile, boolean value returns boolean
* native FilePathExists takes string filePath returns boolean
* native FilePathIsDirectory takes string filePath returns boolean

MDLX API:
Local code, no net traffic. Use GetLocalPlayer() to create player-specific functions.
Der Typ "mdlx" stellt nur eine nicht veränderbare Referenz auf eine Modeldatei dar.
* type mdlx extends agent // ist referenzbasiert, keine Kopierung
* type model extends agent // ist referenzbasiert, keine Kopierung

* native CreateMdlx takes file whichFile returns mdlx
* native DestroyMdlx takes mdlx whichMdlx returns nothing
* native GetMdlxGeosets takes mdlx whichMdlx returns integer
* native GetMdlxMaterials takes mdlx whichMdlx returns integer
* native GetMdlxAnimations takes mdlx whichMdlx returns integer
* native GetMdlxAnimation taks mdlx whichMdlx, integer index returns string
...
  
* native CreateModel takes mdlx whichMdlx, real x, real y, real z returns model
* native RemoveModel takes model whichModel returns nothing
* native SetModelTranslationX takes model whichModel, real x returns nothing // Verschiebung an der X-Achse.
* native SetModelTranslationY takes model whichModel, real y returns nothing
* native SetModelTranslationZ takes model whichModel, real z returns nothing
* native SetModelRotationX takes model whichModel, real angle returns nothing // Drehung an der X-Achse.
* native SetModelRotationY takes model whichModel, real angle returns nothing
* native SetModelRotationZ takes model whichModel, real angle returns nothing // Skalierung an der X-Achse.
* native SetModelScalingX takes model whichModel, real factor returns nothing
* native SetModelScalingY takes model whichModel, real factor returns nothing
* native SetModelScalingZ takes model whichModel, real factor returns nothing
* native PlayModelAnimation takes model whichModel, integer animationIndex returns boolean
* native PlayModelAnimationByName takes model whichModel, string animationName returns boolean
...

Container-API:

Zudem sollte die umständliche Lösung zur Umgehung der Array-Größe mittels Hashtables wegfallen
und es dem Benutzer erlaubt werden, dynamisch Speicher zu allozieren. Allerdings mit vernünftigen
Absicherungen und Wertsetzungen bei Fehlschlägen. 
