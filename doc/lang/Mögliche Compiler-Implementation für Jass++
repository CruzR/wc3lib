Möglich Kapitelunterteilung einer Compiler-Implementation:
1. Vorwort
2. Kompilierungsschritte
	1. Validierung
	2. Der Präprozessor (#if-Überprüfungen - benötigen konstante Ausdrücke, Dateiimporte, Injections)
	3. Kommentar-Entfernung
	4. Paketsortierung
	5. Anweisungsgenerierung (Typenkonvertierungen, Variableninitialisierungen, Funktionsaufrufe usw.)
	6. Verzweigungsgenerierung
	7. Schleifengenerierung
	8. Ausnahmebehandlungsgenerierung
	9. Finally-Generierung
	10. Funktionsgenerierung (auch Lambda-Funktionen, Funktionsauslöser für "threaded"-Funktionen usw.)
	11. Vorlagengenerierung
	12. Aufzählungsgenerierung
	13. Klassengenerierung
	14. InitJassPP-Generierung (exakt nach dem Aufruf der Funktion InitBlizzard in der main-Funktion des Kartenskripts)
	15. Initialisierungsfunktionsaufrufgenerierung (exakt vor dem Aufruf der Funktion RunInitializationTriggers in der main-Funktion des Kartenskripts)
	
3. Generierte Variablen
4. Die globale Hashtable
5. Anwendung

1. Vorwort

Es gibt zwei verschiedene Arten der Umgehung gewisser Limits von Jass bzw. der Implementation bestimmter Fähigkeiten von Jass++.
Zum Einen kann dies durch generierte Variablen und zum Anderen durch eine globale Hashtable erreicht werden.
In beiden Fällen werden Zugriffsfunktionen erzeugt, welche bei den entsprechenden Zugriffen bzw. Aufrufen der Funktionen
mit diesen ersetzt werden und eventuell noch entsprechender Code, wie z. B. die Setzung bestimmter globaler Variablen, hinzugefügt
wird.
Die globale Hashtable ist zwar vermutlich (noch keine belegten Tests) langsamer als der Zugriff auf Array-Variablen, jedoch muss
die Zugriffsfunktion je nach höhe des Indexes länger die entsprechende globale Variable auswählen bzw. werden mehrere globale Variablen
erzeugt, Platz bleibt eventuell ungenutzt, da jedes Array in Warcraft 3 The Frozen Throne eine fixe Größe besitzt, und es entsteht wesentlich
mehr Code im generierten Kartenskript.
Bei einer globalen Hashtable ist es dagegen möglich nahezu beliebig viele Daten zu speichert, ohne besondere neue Variablen zu generieren.
Es fallen sogar eigens deklarierte Variablen weg, da ihre Daten in der Hashtable gespeichert werden.

2. Kompilierungsschritte

2.1 Validierung

Es muss sichergestellt sein, dass sämtliche Funktionen des Typs "code" vor ihrer Verwendung (z. B. beim Hinzufügen als Auslöseraktion) deklariert
wurden (dies hat der JassHelper bisher nicht übernommen).


10. Funktionsgenerierung

Threaded Funktionen/Funktionsprototypen:
Pro "threaded" Funktion bzw. Methode wird ein globaler Auslöser erzeugt, der den Funktionsinhalt
enthält, allerdings keine Parameter entgegen nimmt. Die Parameter werden in lokale Variablen aus
globalen Parametervariablen geladen bzw. vor dem Aufruf gesetzt.
Die Prototypauslöser werden in einem oder mehreren Arrays gespeichert und wie Klassenelemente indiziert,
insofern keine globale Hashtable verwendet wird. Für die Prototypargumente existieren pro Argumenttyp
und der maximal benötigten Anzahl dieser in einer Funktion ebenfalls globale Variablen.
Für den Rückgabewert existiert ebenfalls pro verwendetem Rückgabetyp eine globale Variable.
Prototypfunktionen sind statisch und werden normalerweise nicht zur Laufzeit verändert, weshalb
man keine Index-Auswertungsfunktionen braucht, da der Compiler stets die richtigen Variablen
einfügen sollte.
Achtung: Der Compiler muss beim Verwenden einer neuen globalen Variable, immer die Größe
der bereits verwendeten Arrays abziehen (siehe Klassenelementezugriff).

globals
	trigger array jasspp__prototypeFunctionTriggers0
	trigger array jasspp__prototypeFunctionTriggers1
	<Parametertyp0> jasspp__prototypeFunctionArgument0__<Parametertyp0>
	<Parametertyp1> jasspp__prototypeFunctionArgument0__<Parametertyp1>
	<Rückgabetyp0> jasspp__prototypeFunctionReturnValue0__<Rückgabetyp0>
	<Rückgabetyp1> jasspp__prototypeFunctionReturnValue0__<Rückgabetyp1>
endglobals

function jasspp__prototypeFunctionCondition<Prototypnummer> takes nothing returns boolean
	local <Parametertyp0> <Parametername0> = jasspp__prototypeFunctionArgument0__<Parametertyp0>
	local <Parametertyp1> <Parametername1> = jasspp__prototypeFunctionArgument0__<Parametertyp1>
	set jasspp__prototypeFunctionReturnValue0__<Rückgabetyp0> = <Parametername0> * <Parametername1> // Beispielrechnung
	return true
endfunction

// Man kann genauso gut nur die erste Funktion verwenden, dann wird der Rückgabewert unnötigerweise gesetzt, was eigentlich nicht weiter schlimm ist.
function jasspp__prototypeFunctionAction<Prototypnummer> takes nothing returns nothing
	local <Parametertyp0> <Parametername0> = jasspp__prototypeFunctionArgument0__<Parametertyp0>
	local <Parametertyp1> <Parametername1> = jasspp__prototypeFunctionArgument0__<Parametertyp1>
endfunction

// Kann auch ohne Funktion in den Code kopiert werden.
function jasspp__allocate__PrototypeFunction<Prototypnummer> takes nothing returns nothing
	set jasspp__prototypeFunctionTriggers<Index des verwendeten Arrays>[<Prototypnummer>] = CreateTrigger()
	call TriggerAddCondition(jasspp__prototypeFunctionTriggers<Index des verwendeten Arrays>[<Prototypnummer>], Condition(function jasspp__prototypeFunctionCondition<Prototypnummer>))
	call TriggerAddAction(jasspp__prototypeFunctionTriggers<Index des verwendeten Arrays>[<Prototypnummer>], function jasspp__prototypeFunctionAction<Prototypnummer>)
endfunction

// Kann auch ohne Funktion in den Code kopiert werden.
// Für den Debug-Modus.
function jasspp__free__PrototypeFunction<Prototypnummer> takes nothing returns nothing
	call TriggerClearActions(jasspp__prototypeFunctionTriggers<Index des verwendeten Arrays>[<Prototypnummer>])
	call DestroyTrigger(jasspp__prototypeFunctionTriggers<Index des verwendeten Arrays>[<Prototypnummer>])
	set jasspp__prototypeFunctionTriggers<Index des verwendeten Arrays>[<Prototypnummer>] = null
endfunction

// Kann auch ohne Funktion in den Code kopiert werden.
// Für .evaluations.
function jasspp__evaluations__prototypeFunction<Prototypnummer> takes nothing returns integer
	return GetTriggerEvalCount(jasspp__prototypeFunctionTriggers<Index des verwendeten Arrays>[<Prototypnummer>])
endfunction

// Kann auch ohne Funktion in den Code kopiert werden.
// Für .executions.
function jasspp__executions__prototypeFunction<Prototypnummer> takes nothing returns integer
	return GetTriggerExecCount(jasspp__prototypeFunctionTriggers<Index des verwendeten Arrays>[<Prototypnummer>])
endfunction

// Wird für Funktionsvariablen aller Art benötigt (z. B. virtuelle Methoden)
function jasspp__getPrototypeFunctionTrigger takes integer index returns trigger
	if (index > 0 and index < JASS_MAX_ARRAY_SIZE) then // 0 ist für Nullzeiger reserviert
		return jasspp__prototypeFunctionTriggers0[index]
	elseif (index < 2 * JASS_MAX_ARRAY_SIZE) then
		return jasspp__prototypeFunctionTriggers1[index]
#if (DEBUG_MODE)
	else
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0.0, 0.0, 1000.0, "Unable to get prototype function trigger for index " + I2S(index) + ". Maximum size is $MAXIMALE ANZAHL DER PROTOTYPFUNKTIOEN$.")
#endif
	endif
	return null
endfunction

// Wird statt der eigentlichen Funktion bei evaluate aufgerufen.
function jasspp__prototypeFunction<Prototypnummer>Evaluate takes <Parametertyp0> <Parametername0>, <Parametertyp1> <Paramtername1> returns <Rückgabetyp0>
	set jasspp__prototypeFunctionArgument0__<Parametertyp0> = <Parameter0>
	set jasspp__prototypeFunctionArgument0__<Parametertyp1> = <Parameter1>
	call TriggerEvaluate(jasspp__prototypeFunctionTriggers<Index des verwendeten Arrays>[<Prototypnummer>])
	return jasspp__prototypeFunctionReturnValue0__<Rückgabetyp0>
endfunction

// Wird statt der eigentlichen Funktion bei execute aufgerufen.
function jasspp__prototypeFunction<Prototypnummer>Execute takes <Parametertyp0> <Parametername0>, <Parametertyp1> <Paramtername1> returns nothing
	set jasspp__prototypeFunctionArgument0__<Parametertyp0> = <Parameter0>
	set jasspp__prototypeFunctionArgument0__<Parametertyp1> = <Parameter1>
	call TriggerExecute(jasspp__prototypeFunctionTriggers<Index des verwendeten Arrays>[<Prototypnummer>])
endfunction

// Wird vom erzeugten Timer aufgerufen.
function jasspp__prototypeFunction<Prototypnummer>TimerAction takes nothing returns nothing
	local <Parametertyp0> param0 = LoadHashtable<Parametertyp0>(jasspp__hashTable, GetHandleId(GetExpiredTimer()), 0)
	local <Parametertyp1> param1 = LoadHashtable<Parametertyp1>(jasspp__hashTable, GetHandleId(GetExpiredTimer()), 1)
	call FlushChildHashtable(jasspp__hashTable, GetHandleId(GetExpiredTimer()))
	call DestroyTimer(GetExpiredTimer())
	call jasspp__prototypeFunction<Prototypnummer>Execute(param0, param1)
endfunction

// Wird statt der eigentlichen Funktion bei execute <Real-Ausdruck> aufgerufen.
function jasspp__prototypeFunction<Prototypnummer> takes real timeout, <Parametertyp0> <Parametername0>, <Parametertyp1> <Paramtername1> returns nothing
	local timer whichTimer = CreateTimer()
	call SaveHashtable<Parametertyp0>(jasspp__hashTable, GetHandleId(whichTimer), 0, <Parameter0>)
	call SaveHashtable<Parametertyp1>(jasspp__hashTable, GetHandleId(whichTimer), 1, <Parameter1>)
	call TimerStart(whichTimer, timeout, false, function jasspp__prototypeFunction<Prototypnummer>TimerAction)
	set whichTimer = null
endfunction

13. Klassengenerierung

Pro Klassenelement wird eine globale Arrayvariable deklariert deren Indexwerte der jeweiligen Instanz gehören. Außerdem wird
eine Konstante definiert, welche bestimmt, wie viele Instanzen der Klasse erzeugt werden können. Dies hängt unter anderem
davon ab, ob die Klasse Array-Elemente besitzt.
Pro virtuelle Methode wird eine globale Arrayvariable deklariert, welcher der Prototypindex bei der Instanzerzeugung zugewiesen wird.
Bei der Allokation wird in einer globalen Zählervariable nach einer freien Id gesucht und diese verwendet. 0 zählt dabei als leerer Wert.
Kindklassen erhalten KEINE eigene Zählervariable, da ansonsten das Konzept der virtuellen Methoden nicht funktioniert und nicht auf die Elemente
der Elternklasse zugegriffen werden könnte, ohne diese neu zu deklarieren.
Wird keine globale Hashtable verwendet, so wird je nach Größe pro 8192-Block + 1 (das erste Element ist das 0-Element, welches
für einen nichtallozierten Zeiger reserviert ist) eine globale Array-Variable für jedes Element und jede virtuelle Methode erzeugt.
Außerdem werden Zugriffsfunktionen für die virtuellen Methoden und Elemente
generiert, welche bei Zugriffen anstatt eines normalen Zugriffs verwendet werden (automatische Ersetzung):
globals
	constant integer jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size
	boolean array jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>0
	boolean array jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>1
	<Elementtyp> array jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Elementname>0
	<Elementtyp> array jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Elementname>1
	integer array jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Methodenname>0
	integer array jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Methodenname>1
endglobals

Allokation:

// fixen, 0-Zeiger beachten! Wird nur für die erste Elternklasse definiert!
function jasspp__allocate__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes nothing returns integer
	local integer i = 0
	loop
		exitwhen (i == IMax(1, jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size / JASS_MAX_ARRAY_SIZE))
		set j = 1 // 0 ist reserviert für den Null-Zeiger
		loop
			exitwhen (j == IMin(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size, JASS_MAX_ARRAY_SIZE) + 1)
			if (i == 0) then // Benutze Array-Variable 0
				if (not jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>[j]) then
					set jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>0[j] = true
					return i * j
				endif
			elseif (i == 1) then // Benutze Array-Variable 1
				if (not jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>[j]) then
					set jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>1[j] = true
					return i * j
				endif
			endif
			set j = j + 1
		endloop
		set i = i + 1
	endloop
#if (DEBUG_MODE)
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0.0, 0.0, 1000.0, "Unable to allocate id for an instance of class \"<Paketnamen getrennt durch Punkte><Klassenname>\". Maximum size is " + I2S(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) + ".")
#endif
	return 0
endfunction

// Eventuell Variable automatisch auf 0 setzen? Wird nur für die erste Elternklasse definiert!
function jasspp__free__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id returns nothing
#if (DEBUG_MODE)
	if (id <= 0 or id >= jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0.0, 0.0, 1000.0, "Unable to free id " + I2S(id) + " for an instance of class \"<Paketnamen getrennt durch Punkte><Klassenname>\". Maximum size is " + I2S(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) + ".")
		return
	endif
#endif
	if (id < JASS_MAX_ARRAY_SIZE) then // Benutze Array-Variable 0
		set jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>0[id] = false
	elseif (id < 2 * JASS_MAX_ARRAY_SIZE) then // Benutze Array-Variable 1
		set jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>1[id] = false
	endif
endfunction

// Die Elementzugriffsfunktionen gelten ebenso für virtuelle Methoden

function jasspp__setMember__<Elementname>__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id, <Elementtyp> value returns nothing
#if (DEBUG_MODE)
	if (id < 0 or jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0.0, 0.0, 1000.0, "Unable to set member <Elementname> of type <Elementtyp> for instance " + I2S(id) + " of class \"<Paketnamen getrennt durch Punkte><Klassenname>\". Maximum size is " + I2S(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) + ".")		
		return
	endif
#endif
	if (id < JASS_MAX_ARRAY_SIZE) then // Benutze Array-Variable 0
		set jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Elementname>0[id] = value
	elseif (id < 2 * JASS_MAX_ARRAY_SIZE) then // Benutze Array-Variable 1
		set jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Elementname>1[id] = value
	endif
endfunction

function jasspp__member__<Elementname>__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id returns <Elementtyp>
#if (DEBUG_MODE)
	if (id < 0 or jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0.0, 0.0, 1000.0, "Unable to get member <Elementname> of type <Elementtyp> for instance " + I2S(id) + " of class \"<Paketnamen getrennt durch Punkte><Klassenname>\". Maximum size is " + I2S(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) + ".")		
		return <Elementtypnullwert>
	endif
#endif
	if (id < JASS_MAX_ARRAY_SIZE) then // Benutze Array-Variable 0
		return jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Elementname>0[id]
	elseif (id < 2 * JASS_MAX_ARRAY_SIZE) then // Benutze Array-Variable 1
		return jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Elementname>1[id]
	endif
	return <Elementtypnullwert>
endfunction

// Existiert auch für Kindklassen.
function jasspp__initMembers__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id returns nothing
	call jasspp__setMember__<Elementname>__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id, <Startwert>)
endfunction

// Existiert auch für Kindklassen.
function jasspp__initVirtualMethods__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id returns nothing
	call jasspp__setMember__<Elementname>__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id, <Funktionsprototyp-Id der virtuellen Methode>)
endfunction

// Existiert auch für Kindklassen.
function jasspp__resetMembers__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id returns nothing
	call jasspp__setMember__<Elementname>__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id, <Nullwert>)
endfunction

// Existiert auch für Kindklassen.
function jasspp__resetVirtualMethods__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id returns nothing
	call jasspp__setMember__<Elementname>__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id, 0)
endfunction

// Existiert auch für Kindklassen.
function jasspp__new__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes nothing returns integer
	local integer id = jasspp__allocate__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>()
#if (DEBUG_MODE)
	if (id == 0) then
		return
	endif
#endif
	call jasspp__initMembers__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id) // Falls Elemente vorhanden.
	call jasspp__initVirtualMethods__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id) // Falls virtuelle Methoden vorhanden.
endfunction

// Existiert auch für Kindklassen. Eventuell Variable automatisch auf 0 setzen?
function jasspp__delete__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id returns nothing
	call jasspp__free__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id)
#if (DEBUG_MODE)
	if (id <= 0 or id >= jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0.0, 0.0, 1000.0, "Unable to free id " + I2S(id) + " for an instance of class \"<Paketnamen getrennt durch Punkte><Klassenname>\". Maximum size is " + I2S(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) + ".")
		return
	endif
#endif
	call jasspp__resetMembers__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id) // Falls Elemente vorhanden.
	call jasspp__resetVirtualMethods__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id) // Falls virtuelle Methoden vorhanden.
endfunction

Methoden:
Methoden werden wie Funktionen nach ihren unterschiedlichen Parametern in Bezeichner durchnummeriert.

boolean test(integer a, integer b)
{
	return a + b + this.m_x;
}

wird ersetzt durch

function jasspp__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__test0 takes integer this, integer a, integer b returns boolean
	return a + b + jasspp__member__m_x__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(this)
endfunction

14. InitJassPP generieren

Falls der Hashtable-Modus aktiviert ist, Klassen mit Maximalgrößen über JASS_MAX_ARRAY_SIZE, Arrays mit Maximalgrößen über
JASS_MAX_ARRAY_SIZE oder irgendeine Art von Funktionsprototyp existiert (durch "virtual" bzw. "threaded" Methoden/Funktionen),
wird die Funktion InitJassPP generiert, in welcher entweder die Hashtable erzeugt und gefüllt wird oder alle Prototypfunktionsauslöser in globale Variablen geschrieben werden.
Die Funktion wird nach der Funktion InitBlizzard in der Funktion main des Kartenskripts aufgerufen.


10.3 Zugriffsfunktionen für Funktionen/Methoden mit gleichem Namen

11. Funktionen generieren

Jass-Funktionen, die zwischen den Präprozessoranweisungen #jass und #endjass deklariert wurden,
werden vor sämtlichen in Jass++-Paketen enthaltenen Funktionen in das Kartenskript geschrieben.
Daher sind sie aus Jass++ allesamt verwendbar. Dabei werden sie in der Einlesereihenfolge des Parsers
gelassen.

Ersetzung von threaded Funktionsaufrufen:
execute <Funktionsbezeichner>(<Parameter>)
wird durch
TriggerExecute(

Aufruf von init Funktionen:
"init"-Funktionen besitzen keine Argumente. Sie werden automatisch vor dem Aufruf der Funktion RunInitializationTriggers aufgerufen.
Dies geschieht normalerweise in unbestimmter Reihenfolge (je nachdem, welche der Compiler zu erst findet und wie er sie sortiert).
Besitzt eine "init"-Funktion einen Rückgabetyp oder wird manuell von einem anderen Punkt aus aufgerufen, so sollte eine Warnung ausgegeben werden.

Präprozessoren:


Methoden:
Da alle Methoden virtuell sind, muss schon beim Kompilieren (anhand der Typenumwandlungen) festgestellt werden, welchen Typ die Variable momentan hat
und anhand des Typs die richtige Methode aufgerufen werden.

15. Verzweigungen
Die switch-Verzweigung wird folgendermaßen ersetzt:

Code:
integer a = 10;
switch (a)
{
	case (0, 10)
	{
		break;
	}

	case (100)
	{
	}

	case (1000)
	{
		break;
	}

	default
	{
		break;
	}
}

Generierter Code:
local integer a = 10
if (a == 0 or a == 10) then
	// Anweisungen aus case 0,10 bis break;
elseif (a == 100) then
	// Anweisungen aus case 100
	// Anweisungen aus case 1000 bis break;
elseif (a == 1000) then
	// Anweisungen aus case 1000
else
	// Aktionen aus default
endif

16. Schleifen

Code:
boolean test = false
while (test)
{
	continue;
	break;
}
case (100)
{
}
default
{
}

Generierter Code:
local boolean test = false
local boolean jasspp__loopBreak0
local integer jasspp__loopCounter0
set jasspp__loopBreak0 = false
set jasspp__loopCounter0 = 0
loop
	exitwhen (not test)
	continue; ???????
	set jasspp__loopBreak0 = true // break;
	exitwhen (true) // break;
	set jasspp__loopCounter0 = jasspp__loopCounter0 + 1 // letzte Anweisung
endloop
if (__loopCounter0 == 100) then // case 100
elseif (not jasspp__loopBreak0) then // default
endif

Anmerkungen:
Pro Schleife in einer Funktion, welche eine default-Verzweigung verwendet, wird eine Variable namens jasspp__loopBreak<n> des Types boolean am Anfang
der Funktion deklariert und vor dem Schleifenblock auf false gesetzt.
Diese wird bei einer break-Anweisung auf true gesetzt.
Pro Schleife in einer Funktion, welche eine case-Verzweigung verwendet, wird eine Variable namens jasspp__loopCounter<n> des Typs integer am Anfang 
der Funktion deklariert und vor dem Schleifenblock genullt.
Diese wird nach jedem Schleifendurchlauf erhöht (auch continue?).

Code:
do
{
	break;
}
while (false);
default
{
}

Generierter Code:
local boolean jasspp__loopBreak0
set jasspp__loopBreak0 = false
loop
	set jasspp__loopBreak0 = true
	exitwhen (true)
endloop
if (not jasspp__loopBreak0) then
endif

Code:
integer i;
for (i = 0; i < 100; i++)
{
	break;
}
case (10)
{
}
default
{
}

Generierter Code:
local integer i
local boolean jasspp__loopBreak0
local integer jasspp__loopCounter0
set jasspp__loopBreak0 = false
set jasspp__loopCounter0 = 0
set i = 0 // i = 0
loop
exitwhen (i >= 100) // i < 100
	set jasspp__loopBreak0 = true // break;
	exitwhen (true) // break;
	set jasspp__loopCounter0 = jasspp__loopCounter0 + 1
	set i = i + 1 // i++
endloop
if (__loopCounter0 == 10) then // case 10
elseif (not jasspp__loopBreak0) then // default
endif

17. Ausnahmen

integer test(integer a, integer b) throw (integer)
{
	if (a == b)
	{
		throw 10;
	}
}

Der Compiler generiert:
globals
	integer jasspp__throwValueInteger
	boolean jasspp__thrownInteger
endglobals

function test takes integer a, integer b returns integer
	if (a == b)
		set jasspp__throwValueInteger = 10
		set jasspp__thrownInteger = true
		return 0 // Nullwert
	endif
endfunction


Aufruf:


void bla()
{
	integer x;

	try
	{
		x = test(10, 10);
	}
	catch (integer value)
	{
		Print(I2S(value));
	}
	default
	{
	}
}

Der Compiler generiert:
function bla takes nothing returns nothing
	local integer x
	local integer jasspp__tmpValueInteger0
	local integer jasspp__catchValueInteger
	set jasspp__tmpValueInteger0 = test(10, 10)
	if (__thrownInteger) then
		set jasspp__catchValueInteger = jasspp__throwValueInteger
		call Print(I2S(__catchValueInteger))
	elseif (<restliche Typen überprüfen>) then
	else // eigentliche try-Blockausführung
		set x = jasspp__tmpValue0
	endif
endfunction

Anmerkungen:
Für geworfene Ausnahmen werden pro Typ zwei globale Variable deklariert, welche einmal den Wurfwert und einmal einen booleschen Wert enthalten,
ob der Typ geworfen wurde.
In der Funktion selbst wird pro Setzung einer Variable mit einem möglichen throw-Funktionsaufruf eine temporäre Variable erzeugt, die den Rückgabe-
wert vorerst aufnimmt. Dies muss auch bei verschachtelten Funktionsaufrufen geschehen, wenn auch nur eine einzige der "inneren" Funktionen einen Wert
werfen kann.
Pro "catch"-Behandlungstyp, für welchen ein Name für dessen Wert und nicht nur der Typ angegebn wird, wird am Anfang der Funktion eine lokale 
Variable deklariert. Diese erhält den Wert der globalen Variable, falls ein Wert ihres Types geworfen wurde und etwas mit ihr gemacht wird.
Wird sie im Block nicht verwendet, kann auch ihre Deklaration weggelassen werden (Ausnahme).
Wurde keiner der speziell behandelten Typen geworfen, so werden die restlichen überprüft, falls ein "default"-Block exisitiert.
Wurde nichts geworfen, so erhalten die eigentlich gesetzten Variablen im else-Block schließlich den Wert der temporären Variablen.
ACHTUNG: Was passiert bei Werfungen bei der Initialisierung einer lokalen oder globalen Variable?

18. Finally
"finally"-Blöcke können Code enthalten, der unmittelbar bevor einer throw-, continue-, break- oder return-Anweisung einer Funktion oder Schleife bzw. am Ende eines try-Blocks ausgeführt werden soll.
Sie können daher mit sämtlichen lokalen Variablen arbeiten, jedoch gilt es auf den Inhalt dieser zu achten, da er dem zur Zeit der entsprechenden Anweisung
entspricht, welcher durchaus unterschiedlich sein kann.

Code:
integer max(integer a, integer b)
{
	if (a > b)
		return a;

	return b;

	finally
	{
		if (a == 10)
		{
			Print("Haha");
		}
	}
}

Generierter Code:
function max takes integer a, integer b returns integer
	if (a > b) then
		if (a == 10) then // Kopie des finally-Blocks
			call Print("Haha")
		endif
		return a
	endif

	if (a == 10) then // Kopie des finally-Blocks
		call Print("Haha")
	endif
	return b
endfunction

Code:
void test()
{
	integer i;
	
	for (i = 0; i < 100; i++)
	{
		Print("Iteration " + I2S(i));

		if (i == 2)
			continue;		

		if (i == 4)
			break;
	}
	case (10) // 10 mal durchlaufen
	{
	}
	default // Bis zum Schluss durchlaufen
	{
	}
	finally // Wird vor der break- und der continue-Anweisung ausgeführt.
	{
	}
}

4. Die globale Hashtable erzeugen
Ist der Hashtable-Modus aktiviert, so wird eine globale Variable namens jasspp__hashtable des Typs hashtable in das Kartenskript
eingefügt.
Die globale Hashtable wird für Funktionsparameter von .executewait-, .execute- und .evaluate-Aufrufen, Klasseninstanzen und Arrayinstanzen.
Sie wird in der main-Funktion der Karte nach dem Aufruf der InitBlizzard-Funktion in der Funktion InitJassPP erzeugt.
Nach ihr werden sämtliche Prototypauslöser erzeugt.

Kategorie "Data":
	* Label "FunctionPrototypes" Typ integer Wert <Anzahl der Funktionsprototypen> // Eventuell nur im Debug-Modus, wird zur Laufzeit normalerweise nicht benötigt.
	* Label "ClassInstances" Typ integer Wert <Anzahl der Klasseninstanzen>
	* Label "ArrayInstances" Typ integer Wert <Anzahl der Array-Instanzen>

// TODO: globale Array-Variable mit Auslösern?
Kategorie "FunctionPrototype<n>":
	* Label "Trigger" Typ trigger Wert <Zugehöriger Auslöser>
	* Label "Argument<n>" Typ <Argument<n>-Typ der Funktion> Wert <Argument<n>-Wert gesetzt durch den letzten Aufruf>
	* Label "ReturnValue" Type <Rückgabewerttyp der Funktion> Wert <Rückgabewert gesetzt durch die aufgerufene Funktion>

Kategorie "ClassInstance<n>":
	* Label "MethodFunctionPrototype<Name der virtuellen Methoden>" Typ integer Wert <Nummer des Funktionsprototypen der virtuellen Methode>
	* Label "Member<Elementname>" Typ <Elementtyp> Wert <Elementwert>

Kategorie "ArrayInstance<n>":
	* Label "Index<Index>" Typ <Arraytyp> Wert <Arraywert des Indexes>

Wurden bei einer Klasse oder einem Array Maximalgrößen angegeben, so werden diese innerhalb der generierten Zugriffsfunktionen (siehe 10.1 Zugriffsfunktionen für globale Hashtable)
überprüft und entsprechend verfahren, wenn das Maximum erreicht wurde.

5. Anwendung

./jassc [Optionen] Eingabedateien

Optionen:
	--version Zeigt die verwendete Version an.
	--help Zeigt eine Liste möglicher Optionen.
	--recursive <dir> Sämtliche Verzeichnisse der Eingabedateien werden rekursiv nach .j-Dateien durchsucht, welche ebenfalls geparst werden.
	--include <dirs> Einbindungsverzeichnisse für #include- oder //! import-Anweisungen.
	--showerrors Gibt eine Liste gefundener Syntaxfehler aus.
	--verify Sucht bei Bezeichnern nach zugehörigen Typen und bricht bei Nichtfindungen den Kompilierprozess ab, nachdem alle überprüft wurden (Nichtfindungen werden zur Fehlerliste hinzugefügt).
	--html <dir> Erzeugt eine HTML-API-Referenz aus dem unkompilierten Code.
	--sqlite <file> Erzeugt eine SQLite3-Datenbank aus dem unkompilierten Code.
	--map <file> Erweitert ein Kartenskript um den zu Jass-Code kompilierten Code.
	--mapscript <file> Kompiliert oder erweitert ein Jass-Kartenskript aus dem eingelesen Code.
	--script <file> Kompiliert ein Jass-Skript aus dem eingelesen Code.
	--optimize <options> Optimiert den Code beim Kompilieren.
	--language <lang> Setzt den Startwert der Skriptsprache (standardmäßig jass, mögliche Einträge: jass, vjass, zinc, jasspp, cjass).
